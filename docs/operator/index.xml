<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operator on EMOC</title><link>https://sunxlei.github.io/EMOCDoc/docs/operator/</link><description>Recent content in Operator on EMOC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sunxlei.github.io/EMOCDoc/docs/operator/index.xml" rel="self" type="application/rss+xml"/><item><title>Tournament Selection</title><link>https://sunxlei.github.io/EMOCDoc/docs/operator/tournament_selection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/operator/tournament_selection/</guid><description>Tournament Selection # File position: /EMOC/src/operator/tournament_selection.h and /EMOC/src/operator/tournament_selection.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } There are three tournament selection variants in EMOCï¼š
Individual* TournamentByRank(Individual* ind1, Individual* ind2)
Individual* TournamentByFitness(Individual* ind1, Individual* ind2, int greater_is_better = 0)
Individual* TournamentByCustom(Individual* ind1, double ind1_prop, Individual* ind2, double ind2_prop, int greater_is_better = 0)
Individual* TournamentByRank(Individual* ind1, Individual* ind2) Use the non-dominated sorting results (i.</description></item><item><title>Simulated Binary Crossover</title><link>https://sunxlei.github.io/EMOCDoc/docs/operator/sbx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/operator/sbx/</guid><description>Simulated Binary Crossover # File position: /EMOC/src/operator/sbx.h and /EMOC/src/operator/sbx.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } void SBX(Individual* parent1, Individual* parent2, Individual* offspring1, Individual* offspring2, std::vector&amp;lt;double&amp;gt;&amp;amp; lower_bound, std::vector&amp;lt;double&amp;gt;&amp;amp; upper_bound, CrossoverParameter&amp;amp; cross_para) Do the simulated binary crossover based on parent1 and parent2, the results are stored in offspring1 and offspring2.
Parameter: parent1: Individual*, default=None&amp;nbsp &amp;nbsp The pointer to the first parent individual to do simulated binary crossover.</description></item><item><title>Differential Evolution</title><link>https://sunxlei.github.io/EMOCDoc/docs/operator/de/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/operator/de/</guid><description>Differential Evolution # File position: /EMOC/src/operator/de.h and /EMOC/src/operator/de.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } void DE(Individual *parent1, Individual *parent2, Individual *parent3, Individual *offspring, std::vector&amp;lt;double&amp;gt;&amp;amp; lower_bound, std::vector&amp;lt;double&amp;gt;&amp;amp; upper_bound, CrossoverParameter&amp;amp; cross_para) Do the differential evolution on parent1 , parent2 and parent3, the results are stored in offspring.
Parameter: parent1: Individual*, default=None&amp;nbsp &amp;nbsp The pointer to the first parent individual to do differential evolution. parent2: Individual*, default=None&amp;nbsp &amp;nbsp The pointer to the second parent individual to do differential evolution.</description></item><item><title>Uniform Crossover</title><link>https://sunxlei.github.io/EMOCDoc/docs/operator/uniform_crossover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/operator/uniform_crossover/</guid><description>Uniform Crossover # File position: /EMOC/src/operator/uniform_crossover.h and /EMOC/src/operator/uniform_crossover.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } void UniformCrossover(Individual *parent1, Individual *parent2, Individual *offspring1, Individual *offspring2) Do the uniform crossover on parent1 and parent2, the results are stored in offspring1 and offspring2. Note this crossover is for binary encoding problems.
Parameter: parent1: Individual*, default=None&amp;nbsp &amp;nbsp The pointer to the first parent individual to do uniform crossover.</description></item><item><title>Order Crossover</title><link>https://sunxlei.github.io/EMOCDoc/docs/operator/order_crossover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/operator/order_crossover/</guid><description>Order Crossover # File position: /EMOC/src/operator/order_crossover.h and /EMOC/src/operator/order_crossover.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } void OrderCrossover(Individual *parent1, Individual *parent2, Individual *offspring1, Individual *offspring2) Do the order crossover on parent1 and parent2, the results are stored in offspring1 and offspring2. Note this crossover is for permutation encoding problems.
Parameter: parent1: Individual*, default=None&amp;nbsp &amp;nbsp The pointer to the first parent individual to do order crossover.</description></item><item><title>Polynomial Mutation</title><link>https://sunxlei.github.io/EMOCDoc/docs/operator/polynomial_mutation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/operator/polynomial_mutation/</guid><description>Polynomial Mutation # File position: /EMOC/src/operator/polynomial_mutation.h and /EMOC/src/operator/polynomial_mutation.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } void PolynomialMutation(Individual *ind, std::vector&amp;lt;double&amp;gt;&amp;amp; lower_bound, std::vector&amp;lt;double&amp;gt;&amp;amp; upper_bound, MutationParameter&amp;amp; mutation_para) Do the polynomial mutation on ind. The mutation results are stored in itself.
Parameter: ind: Individual*, default=None&amp;nbsp &amp;nbsp The pointer to the individual which will do the polynomial mutation. lower_bound: std::vector&amp;ltdouble&amp;gt, default=None&amp;nbsp &amp;nbsp The lower boundary of decision variables.</description></item><item><title>Bit Flip Mutation</title><link>https://sunxlei.github.io/EMOCDoc/docs/operator/bit_mutation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/operator/bit_mutation/</guid><description>Bit Flip Mutation # File position: /EMOC/src/operator/bit_mutation.h and /EMOC/src/operator/bit_mutation.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } void BitFlipMutation(Individual *ind, MutationParameter &amp;amp;mutation_para) Do the bit flip mutation on ind. The mutation results are stored in itself. Note this mutation is for binary encoding problems.
Parameter: ind: Individual*, default=None&amp;nbsp &amp;nbsp The pointer to the individual which will do the bit flip mutation. mutation_para: MutationParameter, default=None&amp;nbsp &amp;nbsp The parameter of this mutation.</description></item><item><title>Swap Mutation</title><link>https://sunxlei.github.io/EMOCDoc/docs/operator/swap_mutation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/operator/swap_mutation/</guid><description>Swap Mutation # File position: /EMOC/src/operator/swap_mutation.h and /EMOC/src/operator/swap_mutation.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } void SwapMutation(Individual *ind, MutationParameter &amp;amp;mutation_para) Do the swap mutation on ind. The mutation results are stored in itself. Note this mutation is for permutation encoding problems.
Parameter: ind: Individual*, default=None&amp;nbsp &amp;nbsp The pointer to the individual which will do the swap mutation. mutation_para: MutationParameter, default=None&amp;nbsp &amp;nbsp The parameter of this mutation.</description></item></channel></rss>