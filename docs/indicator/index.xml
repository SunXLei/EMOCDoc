<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Indicator on EMOC</title><link>https://sunxlei.github.io/EMOCDoc/docs/indicator/</link><description>Recent content in Indicator on EMOC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sunxlei.github.io/EMOCDoc/docs/indicator/index.xml" rel="self" type="application/rss+xml"/><item><title>Generational Distance</title><link>https://sunxlei.github.io/EMOCDoc/docs/indicator/gd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/indicator/gd/</guid><description>Generational Distance # File position: /EMOC/src/metric/gd.h and /EMOC/src/metric/gd.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } double CalculateGD(Individual** pop, int pop_num, int obj_num, double** pf_data, int pf_size) Calculate the generational distance value of current population pop based on the pareto front data pf_data.
Parameter: pop: Individual**, default=None&amp;nbsp &amp;nbsp The population which need to be initialized. It's an array of Individual* where each Individual* is a pointer to a individual in the population.</description></item><item><title>Generational Distance Plus</title><link>https://sunxlei.github.io/EMOCDoc/docs/indicator/gd_plus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/indicator/gd_plus/</guid><description>Generational Distance Plus # File position: /EMOC/src/metric/gd_plus.h and /EMOC/src/metric/gd_plus.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } double CalculateGDPlus(Individual** pop, int pop_num, int obj_num, double** pf_data, int pf_size) Calculate the generational distance plus value of current population pop based on the pareto front data pf_data.
Parameter: pop: Individual**, default=None&amp;nbsp &amp;nbsp The population which need to be initialized. It's an array of Individual* where each Individual* is a pointer to a individual in the population.</description></item><item><title>Inverted Generational Distance</title><link>https://sunxlei.github.io/EMOCDoc/docs/indicator/igd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/indicator/igd/</guid><description>Inverted Generational Distance # File position: /EMOC/src/metric/igd.h and /EMOC/src/metric/igd.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } double CalculateIGD(Individual** pop, int pop_num, int obj_num, double** pf_data, int pf_size) Calculate the inverted generational distance value of current population pop based on the pareto front data pf_data.
Parameter: pop: Individual**, default=None&amp;nbsp &amp;nbsp The population which need to be initialized. It's an array of Individual* where each Individual* is a pointer to a individual in the population.</description></item><item><title>Inverted Generational Distance Plus</title><link>https://sunxlei.github.io/EMOCDoc/docs/indicator/igd_plus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/indicator/igd_plus/</guid><description>Inverted Generational Distance Plus # File position: /EMOC/src/metric/igd_plus.h and /EMOC/src/metric/igd_plus.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } double CalculateIGDPlus(Individual** pop, int pop_num, int obj_num, double** pf_data, int pf_size) Calculate the inverted generational distance plus value of current population pop based on the pareto front data pf_data.
Parameter: pop: Individual**, default=None&amp;nbsp &amp;nbsp The population which need to be initialized. It's an array of Individual* where each Individual* is a pointer to a individual in the population.</description></item><item><title>Hypervolume</title><link>https://sunxlei.github.io/EMOCDoc/docs/indicator/hv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/indicator/hv/</guid><description>Hypervolume # File position: /EMOC/src/metric/hv.h and /EMOC/src/metric/hv.cpp
Due to the complexity of calculating hypervolume, we use a class to encapsulate the details into a class HVCalculator. The most important public interface is the following:
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } double HVCalculator::Calculate(Individual** pop, int pop_num, int obj_num, double** pf_data, int pf_size) Calculate the hypervolume value of current population pop based on the pareto front data pf_data.</description></item><item><title>Spacing</title><link>https://sunxlei.github.io/EMOCDoc/docs/indicator/spacing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sunxlei.github.io/EMOCDoc/docs/indicator/spacing/</guid><description>Spacing # File position: /EMOC/src/metric/spacing.h and /EMOC/src/metric/spacing.cpp
.emoc_doc_table_title{ background-color:#F0F7FA; } .emoc_doc_table_content{ background-color:#FFFFFF; width:100%; } double CalculateSpacing(Individual **pop, int pop_num, int obj_num) Calculate the spacing value of current population pop.
Parameter: pop: Individual**, default=None&amp;nbsp &amp;nbsp The population which need to be initialized. It's an array of Individual* where each Individual* is a pointer to a individual in the population. pop_num: int, default=None&amp;nbsp &amp;nbsp The size of the given population.</description></item></channel></rss>